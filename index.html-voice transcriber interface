<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DeepVoice - Real-time Voice Transcription</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            padding: 40px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            width: 100%;
            max-width: 800px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        .title {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .subtitle {
            color: #64748b;
            font-size: 1.1rem;
            font-weight: 500;
        }

        .controls {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            align-items: center;
            justify-content: center;
        }

        .record-btn {
            position: relative;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border: none;
            border-radius: 50%;
            width: 80px;
            height: 80px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        .record-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
        }

        .record-btn.recording {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            animation: pulse 2s infinite;
        }

        .record-btn.recording:hover {
            box-shadow: 0 15px 35px rgba(239, 68, 68, 0.4);
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .mic-icon {
            width: 24px;
            height: 24px;
            fill: white;
        }

        .status {
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 600;
            color: #475569;
        }

        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #94a3b8;
            transition: all 0.3s ease;
        }

        .status-dot.recording {
            background: #ef4444;
            animation: blink 1.5s infinite;
        }

        .status-dot.connected {
            background: #10b981;
        }

        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }

        .transcript-container {
            position: relative;
            margin-bottom: 20px;
        }

        .transcript-area {
            width: 100%;
            min-height: 300px;
            padding: 24px;
            border: 2px solid #e2e8f0;
            border-radius: 16px;
            font-size: 1.1rem;
            line-height: 1.6;
            resize: vertical;
            font-family: inherit;
            background: rgba(248, 250, 252, 0.8);
            transition: all 0.3s ease;
            color: #334155;
        }

        .transcript-area:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            background: rgba(255, 255, 255, 0.9);
        }

        .transcript-area::placeholder {
            color: #94a3b8;
            font-style: italic;
        }

        .actions {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            margin-top: 20px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.95rem;
        }

        .btn-secondary {
            background: #f1f5f9;
            color: #475569;
            border: 1px solid #e2e8f0;
        }

        .btn-secondary:hover {
            background: #e2e8f0;
            transform: translateY(-1px);
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
        }

        .stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px 0;
            border-top: 1px solid #e2e8f0;
            margin-top: 20px;
            font-size: 0.9rem;
            color: #64748b;
        }

        .word-count {
            font-weight: 600;
        }

        .error-message {
            background: linear-gradient(135deg, #fef2f2, #fee2e2);
            border: 1px solid #fca5a5;
            color: #dc2626;
            padding: 16px;
            border-radius: 12px;
            margin-bottom: 20px;
            display: none;
        }

        .typing-indicator {
            display: none;
            align-items: center;
            gap: 8px;
            color: #667eea;
            font-weight: 500;
            margin-top: 10px;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: #667eea;
            animation: typing 1.4s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {
            0%, 60%, 100% { transform: translateY(0); opacity: 0.4; }
            30% { transform: translateY(-10px); opacity: 1; }
        }

        @media (max-width: 640px) {
            .container {
                padding: 24px;
                margin: 10px;
            }

            .title {
                font-size: 2rem;
            }

            .controls {
                flex-direction: column;
                gap: 16px;
            }

            .actions {
                flex-direction: column;
            }

            .stats {
                flex-direction: column;
                gap: 8px;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">DeepVoice</h1>
            <p class="subtitle">Real-time voice transcription powered by Deepgram</p>
        </div>

        <div class="error-message" id="errorMessage"></div>

        <div class="controls">
            <button class="record-btn" id="recordBtn" title="Click to start/stop recording">
                <svg class="mic-icon" viewBox="0 0 24 24">
                    <path d="M12 2a3 3 0 0 0-3 3v6a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/>
                    <path d="M19 10v1a7 7 0 0 1-14 0v-1"/>
                    <path d="M12 18.5v3.5"/>
                    <path d="M8 22h8"/>
                </svg>
            </button>
            
            <div class="status">
                <div class="status-dot" id="statusDot"></div>
                <span id="statusText">Ready to record</span>
            </div>
        </div>

        <div class="transcript-container">
            <textarea 
                class="transcript-area" 
                id="transcriptArea" 
                placeholder="Your voice will be transcribed here in real-time... Click the microphone button to start recording!"
                readonly
            ></textarea>
            
            <div class="typing-indicator" id="typingIndicator">
                <span>Transcribing</span>
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        </div>

        <div class="actions">
            <button class="btn btn-secondary" id="clearBtn">Clear Text</button>
            <button class="btn btn-primary" id="copyBtn">Copy to Clipboard</button>
        </div>

        <div class="stats">
            <div class="word-count" id="wordCount">0 words</div>
            <div id="connectionStatus">Not connected</div>
        </div>
    </div>

    <script>
        class VoiceTranscriber {
            constructor() {
                this.socket = null;
                this.mediaRecorder = null;
                this.audioContext = null;
                this.isRecording = false;
                this.isConnected = false;
                
                // DOM elements
                this.recordBtn = document.getElementById('recordBtn');
                this.statusDot = document.getElementById('statusDot');
                this.statusText = document.getElementById('statusText');
                this.transcriptArea = document.getElementById('transcriptArea');
                this.clearBtn = document.getElementById('clearBtn');
                this.copyBtn = document.getElementById('copyBtn');
                this.wordCount = document.getElementById('wordCount');
                this.connectionStatus = document.getElementById('connectionStatus');
                this.errorMessage = document.getElementById('errorMessage');
                this.typingIndicator = document.getElementById('typingIndicator');
                
                this.initializeEventListeners();
                this.connectToDeepgram();
            }

            initializeEventListeners() {
                this.recordBtn.addEventListener('click', () => {
                    if (this.isRecording) {
                        this.stopRecording();
                    } else {
                        this.startRecording();
                    }
                });

                this.clearBtn.addEventListener('click', () => {
                    this.transcriptArea.value = '';
                    this.updateWordCount();
                });

                this.copyBtn.addEventListener('click', async () => {
                    try {
                        await navigator.clipboard.writeText(this.transcriptArea.value);
                        this.copyBtn.textContent = 'Copied!';
                        setTimeout(() => {
                            this.copyBtn.textContent = 'Copy to Clipboard';
                        }, 2000);
                    } catch (err) {
                        this.showError('Failed to copy to clipboard');
                    }
                });

                this.transcriptArea.addEventListener('input', () => {
                    this.updateWordCount();
                });
            }

            connectToDeepgram() {
                try {
                    // Note: In a real application, you'd connect to your backend server
                    // which would then connect to Deepgram with your API key
                    this.updateConnectionStatus(true);
                    this.showMessage('Connected to transcription service');
                } catch (error) {
                    this.showError('Failed to connect to transcription service');
                    this.updateConnectionStatus(false);
                }
            }

            async startRecording() {
                try {
                    // Check for microphone permission
                    const stream = await navigator.mediaDevices.getUserMedia({ 
                        audio: {
                            echoCancellation: true,
                            noiseSuppression: true,
                            sampleRate: 16000
                        } 
                    });

                    // Create audio context for processing
                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    
                    // Set up MediaRecorder
                    this.mediaRecorder = new MediaRecorder(stream, {
                        mimeType: 'audio/webm;codecs=opus'
                    });

                    this.mediaRecorder.ondataavailable = (event) => {
                        if (event.data.size > 0) {
                            this.sendAudioToDeepgram(event.data);
                        }
                    };

                    this.mediaRecorder.start(100); // Send data every 100ms
                    this.isRecording = true;
                    this.updateRecordingState();
                    this.showTypingIndicator(true);

                } catch (error) {
                    this.showError('Microphone access denied or not available');
                    console.error('Error starting recording:', error);
                }
            }

            stopRecording() {
                if (this.mediaRecorder && this.isRecording) {
                    this.mediaRecorder.stop();
                    this.mediaRecorder.stream.getTracks().forEach(track => track.stop());
                    this.isRecording = false;
                    this.updateRecordingState();
                    this.showTypingIndicator(false);
                }
            }

            sendAudioToDeepgram(audioBlob) {
                // In a real implementation, you would:
                // 1. Convert the audio blob to the format expected by Deepgram
                // 2. Send it to your backend server
                // 3. Your backend would forward it to Deepgram
                // 4. Receive the transcription and display it
                
                // For demonstration, we'll simulate transcription
                this.simulateTranscription();
            }

            simulateTranscription() {
                // Simulate real-time transcription with sample phrases
                const samplePhrases = [
                    "Hello, this is a demonstration of real-time voice transcription.",
                    "The technology behind this uses advanced speech recognition.",
                    "You can speak naturally and see your words appear instantly.",
                    "This could be useful for taking notes or dictating documents.",
                    "The accuracy improves as the AI learns from more speech patterns."
                ];

                if (this.isRecording) {
                    const randomPhrase = samplePhrases[Math.floor(Math.random() * samplePhrases.length)];
                    this.appendTranscription(randomPhrase + " ");
                    
                    // Simulate next phrase after a delay
                    setTimeout(() => {
                        if (this.isRecording) {
                            this.simulateTranscription();
                        }
                    }, 3000 + Math.random() * 2000);
                }
            }

            appendTranscription(text) {
                this.transcriptArea.value += text;
                this.transcriptArea.scrollTop = this.transcriptArea.scrollHeight;
                this.updateWordCount();
                this.showTypingIndicator(false);
                
                // Show typing indicator for next transcription
                if (this.isRecording) {
                    setTimeout(() => {
                        this.showTypingIndicator(true);
                    }, 500);
                }
            }

            updateRecordingState() {
                if (this.isRecording) {
                    this.recordBtn.classList.add('recording');
                    this.statusDot.classList.add('recording');
                    this.statusText.textContent = 'Recording...';
                } else {
                    this.recordBtn.classList.remove('recording');
                    this.statusDot.classList.remove('recording');
                    this.statusText.textContent = this.isConnected ? 'Ready to record' : 'Disconnected';
                }
            }

            updateConnectionStatus(connected) {
                this.isConnected = connected;
                if (connected) {
                    this.statusDot.classList.add('connected');
                    this.connectionStatus.textContent = 'Connected to Deepgram';
                } else {
                    this.statusDot.classList.remove('connected');
                    this.connectionStatus.textContent = 'Disconnected';
                }
            }

            updateWordCount() {
                const words = this.transcriptArea.value.trim().split(/\s+/).filter(word => word.length > 0);
                this.wordCount.textContent = `${words.length} word${words.length !== 1 ? 's' : ''}`;
            }

            showTypingIndicator(show) {
                this.typingIndicator.style.display = show ? 'flex' : 'none';
            }

            showError(message) {
                this.errorMessage.textContent = message;
                this.errorMessage.style.display = 'block';
                setTimeout(() => {
                    this.errorMessage.style.display = 'none';
                }, 5000);
            }

            showMessage(message) {
                // You could implement a success message system here
                console.log(message);
            }
        }

        // Initialize the application when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new VoiceTranscriber();
        });
    </script>
</body>
</html>
